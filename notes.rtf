{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red26\green26\blue26;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c13333\c13333\c13333;
}
\margl1440\margr1440\vieww14440\viewh13840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Jan / Feb\
- Prepare\
- Coding\
- Design\
\
What is the most significant design problem you solved ?\
URL shortener \
Requirements\
- persist\
- ttl\
- public / all\
- \
\
Paxos algorithm based replication\
\
Coding\
- String manipulation\
  -  generate permutations of string, palindrome, search for a word, \
- arrays - collection of problems\
  - arrays of integers - find largest contiguous sum that is biggest sum\
- bit manipulation\
   - easiest way to divide a number by 2,  multiply or divide by 2.\
     (Left shift / right shift)\
- lists / sets\
- trees - binary search tree, trie, red-black tree\
- stacks, linked_lists, doubly_linked_lists, \
- graph\
  -  how do you represent a graph\
  - adjacency lists and adjacency matrix\
- shortest path - djstraw also \
- big (o) complexity\
- sorting algorithms -quick_sort, merge_sort, heap_sort\
- heap_select - min_heap, max_heap - external-sorting\
- dynamic programming\
\
\
Camera problem\
- in a circle - you are given different points - each point\
\
\
Url shortener\
Task scheduler\
storage/data Replication\
design youtube\
Google search\
Facebook like\
Twitter / tweets\
Social graph\
Gmail  / calendar\
\
\
Introduction to algorithms - by Thomas cormel\
Algorithms - Sanjay. Dasgupta\
projectEuler.com\
spoj.com - sphere online judge\
Codeforces.com\
Usaco training\
\
Design\
- gang of four - design patterns\
- ssl/tls, web socket \
- would you use udp, compression ?\
- discrete probability,\
\
>>>>>\
\
ShopKick\
- 150 to 800\
- engineering org - scale\
- financials - what is shareable - company is making money\
  - if we are not expanding - we may be profitable\
  - SKtelecom - giving us large amount of runway\
- grow user base by 10x\
- make it independent with 18-24 months and 6 months after - go public\
- 15-16 - 2.5x, planning for same time of growth.\
-  Brand team - work with brand partners - build products. (Consumer - mobile app).\
   - Targets / Walmart /macys / Calvin Klein - partners work with shop kick to surface products in a certain way.  \
   - current size - 12. Goal - north of 20. \
- Eng org - 70.  Dir brand (grow), Dir consumer (grow), Dir data/insights , Dir devops. ProdMgrs & designers - easy / accurate to use\
\
Phone call \
- getting to know you\
- your personality\
- are you inspirational\
- are you a good people leader\
- why you are leaving\
\
90 mins with CTO / in person\
- knowledge of current tech\
- managing different teams\
- design questions\
- some leadership questions\
\
Several people / \
- meet with several people \
\
>>>>>>\
\
Synack\
- Automated system\
  - client - contract subscription system - millions of data sets - running through fire drill\
  - strengths / weakness - different kinds of levels\
  - data is confidential\
  - pull the data and present in a way to exec and engineers.\
  - want clients to do the remediation.\
  - massive govt agencies on April 15\
  - we need to do at scale.\
- SRTP\
  - ethical hacker team - 300-400 hacker team (Massive vetting process and these hacker work for us)\
  - analyze data - which hacker has strengths in various areas - highest effectiveness in the hacking team.\
  - Dir of Engineering for Web\
     - brings data from web and presented in a way that is awesome.\
     - mid level web engineers - we want to grow the team right way.\
- Competitor - hackerone - here is the company we are working with - hacker find things and they get paid for what they find.\
  - Synack do not advertise. We don\'92t want to leave things in grey area.\
  - cofounders come from NSA. \
- My qs\
  - 4 years old - private company - 55 million and msft gave 35 million.\
  - Revenue - profit / loss - don\'92t know\
    - % growth / potential - burn rate ? - more than 4x for last 2 years.\
  - 100 employees \
\
>>>>>\
\
Questions:-\
- Integer ID (4 bytes) - 2 pow 32 -  to 7 character string of 62 values.\
- 
\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
62-base numeric ?\
- convert a number to binary\
- 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
>>>>>\
\
\pard\pardeftab720\partightenfactor0

\f1\fs38 \cf4 \cb3 \expnd0\expndtw0\kerning0
I didn\'92t have an MBA, so I got my management education through American Management Association courses and seminars\'97and my company paid for it.\
\
\
5. Find a mentor. Identify a high-level person, maybe your boss, who can help you advance. Share your goal with him and ask him how to go about it. But do it in such a way so you don\'92t seem like a threat to his position.
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
>>>\
\
10 people -  $20, $10, $5\
\
Perm - 10P3 = 10! / 7! = 10*9*8= 90*8=720\
Comb = 10P3/3! = 720/6 =120\
\
>>>>\
\
- - - \
10C3 = 120\
8C3 = 8!/(5!*3!)\
>>>>>>\
\
8C3 = 8*7*6/6 = 56\
5G * 3B = 8\
\
GGB\
\
5C2 * 3C1\
5!/(3!*2!)  + 3!/(1! * 2!)\
10 * 3 = 30\
\
>>>>>>\
\
First round - 80k\
Third round - 165k\
\
>>>>>>>\
Tile\
100M\
- # people - 100\
- # engineers - 50\
  - envisioning to grow to 100\
-  series D1- 25M funding - 59 Million\
>>>\
30 M\
10 engineers -> scale to 30 or greater\
Gigster - data, ml experience\
Roger dickey - founder, \
Vp of eng - to 40\
San Francisco\
Dossier - 500 3rd st\
\
\
>>>>\
Companies\
Snapdocs - mortgage automation - pr\'e9s\'e9ries A, revenue - 400k / mo - profitable, team of 5 - VP engineering\
Zesty - custom lunch delivery to offices- VP engineering\
Gigster - VP engineering - ML for software development and matching folks\
Bighealth - VP engineering \
Pandora - VP engineering of platform\
Uber\
Twitter\
Google\
>>>>>>>\
\
1) Finish recursive backtracking problem\
2) finish linked list implimentation using recursion, sorted insertion using recursion\
3) big(O) for factorial (n) and tower of Hanoi (2pown)\
\
\
>>>>>>>\
Sorting\
1) Selection sort\
   -> find smallest, swap current smallest and current first\
   -> Repeat / Recur to find next smallest\
\
Int findMin(int start, int num[], int arrlen) \{\
   Int min = num[start]; int minindex = start;\
   For (int I = start+1; I < arrlen; I++) \{\
       If (num[I] < min) \{\
           Min = num[I];\
           Minindex = i;\
       \}\
   \}\
   Return minindex;\
\}\
\
Void swap(int num[], index1, index2) \{\
    // a=a^B, b=a^b, a=a^b\
   num[index1] = num[index1] ^ num[index2];\
   num[index2] = num[index2] ^ num[index1];\
   num[index1] = num[index1] ^ num[index2];\
\}\
\
void recSelectionSort(int start, int num[], int arrlen) \{\
   If (start == arrlen) return; // base case\
   \
   // do business logic on first element and recur on remaining\
   Int minindex = findMin(start, num, arrlen);\
   swap(num, start, minindex);\
   // recur on remaining\
   recSelectionSort(start+1, num, arrlen);\
\}\
\
Void selectionSort(int num[], int arrlen) \{\
    recSelectionSort(0, num, arrlen);\
\}\
\
Int main() \{\
   Int num[] = \{2,8,3,10,5\}; int arrlen = 5;\
   selectionSort(num, arrlen);\
   for (int I = 0; I< arrlen; I++) cout << arr[i] << \'93, \'93;\
   Cout << endl;\
   Return 0;\
\}\
\
Void sectionSort2( int num[], int arrlen) \{\
   For (int I = 0; I<arrlen-1; I++) \{\
       Int minindex = i;\
       For (int j = I+1;  j < arrlen; j++) \{\
           If (num[j] < num[minindex]) \{ \
 	     minindex = j;\
            \}\
        \}\
        swap(num, I,  minindex);\
    \}\
\}\
>>>>\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
Stanford lectures\
11 - recursion + some pointer intro\
12 - details of pointers\
13 - linked lists\
14 - Time complexity , Big-O, analyzing recursive fund - factorial (o-n), move tower (2pown), sorting - selection sort\
15,16 - various sorting algos\
17 - oo programming\
\
>>>>\
\
Online resources\
- http://cs229.stanford.edu/\
- \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\
>>>\
Searching, Sorting,\
Shuffle,\
Removing dup, permuting, finding mod, \
>>>>>\
\
Stack - can be implemented using arrays or linked_list, - LIFO\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0           - vector, sequence, list - all can support stack. Default is deque  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0           - Push, pop, top, size, isempty(). - all in constant time\
          - Examples - function calls, recursion, reverse, parsing (infix, postfix), Undo operation in an editor, \
          - Examples - compiler parenthesis balance verification\
 \
Deque - vectors (but they are not necessarily continuous )\
            - can be added/removed at front and back. Adding in middle is expensive.\
            - push or enqueue, pop or dequeue, peek or top, isEmpty()\
	 - individual elements accessible in constant time using random access iterator.\
	 - insertion in the middle is expensive\
 	 - For very long sequences, deque is better.\
	 - for middle insertions - list / forward_list are better.\
\
Queues - list or deque, deque being the default.\
              - container adaptor\
	   - can be added / removed in constant time. \
	   - circular array would implement queue.\
              - enqueue / dequeue (push_back / pop_front) in constant time. Supports push_back, pop_front, back, front, empty(), size()\
              - shared resource (queue - first come first serve), Network printer\
	   - cpu processor is a shared resource - process scheduling queue, simulating wait\
Tress - application - file system, organize data for quick search, insertion, deletion - binary search tree, \
                                Trie - dictionary for dynamic spellchecking, Network routing algorithm\
          - created using dynamically created nodes, Arrays (used for min/max heaps)\
          - in a perfect binary tree, n/2 nodes will in last level.\
          - Depth first - space complexity - O(h), worst O(n), best/avg - O(log n).   Time complexity = O(n)\
\
Graphs = G(V, E), V- set of vertices, E- set of edges. |V| - number of vertices, |E| - number of edges\
Weighted graph - edges have weights.\
             - Applications - Social graph like FB - undirected graph\
                                    - www - interlinked webpages can be directed graph, web crawling - graph traversal\
			    - Intercity road network - weighted undirected graph\
			    - Intracity road network - weighted directed graph\
              - Undirected graph can be redrawn as directed graph with 2 directed paths for each edge.\
              - Directed graphs cannot be redrawn as undirected graph.\
	   - edge can be a self-loop if there is only vertex for an edge.\
	   - if there are multiple edges between 2 nodes - it is called multi-edge.\
  	   - if there are no self loop or multi-edge, it is called a simple graph.\
For directed graph with n vertices - |E| = n(n-1). For undirected graph, |E| = n(n-1)/2 - O(n)\
	  \
Dense graph is stored in Adjacency Matrix\
Sparse graph is stored in Adjacency list\
\
Queues\
0-9 (size = 10) - n=10\
0 to n-1 (n-1 is 9)\
x % n\
0 to n-1 % n = 0 to n-1\
N % n = 0\
n+1 % n = 1\
n+2 % n = 2\
n+n-1 % n = n-1\
2n % n = 0\
\
Current pos = I Or I %n\
Next pos = I+1 % n\
Prev pos =     I -1 % n or I + n -1 % n\
\
Implement a queue - enqueue, dequeue \
Priority queues - max-heap\
Sets - binary search trees\
\
>>>>\
1) elasticsearch - airflow, kafka\
2) User table - key value store / segmentation\
3) machine learning - query the data - over/under indexing - work with universities - work with data science person\
>>>>\
\
\
I am Vivek H\
- greyspot, ispot, samba\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}